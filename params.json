{
  "name": "Src2Markdown",
  "tagline": "Create markdown reports from scripts",
  "body": "# Description\r\n\r\nThis program takes a script written in **python**, **perl**, **javascript**, **R** or **shell**\r\nand generates a markdown document with comments processed as markdown and code embedded in\r\nmarkdown code tags.\r\n\r\n\r\n# Requirements\r\n\r\n## Pandoc\r\n\r\nThis program requires [Pandoc](http://pandoc.org/) to convert the markdown output generated\r\nwith this program to any other format.\r\n\r\nDownload Pandoc from the [installing webpage](http://pandoc.org/installing.html). \r\n\r\n## pypandoc\r\n\r\nIn order to use pandoc within python, pypandoc wrapper is required.\r\n\r\nInstall `pypandoc` via `pip`:\r\n\r\n```bash\r\nsudo pip install pypandoc\r\n```\r\n\r\n> See [pip webpage](https://pip.pypa.io/en/stable/installing/) if you do not use `pip` yet\r\n\r\n\r\n# Parameter description\r\n\r\n\r\n| Parameters |                  Description                  |\r\n|:----------:|:---------------------------------------------:|\r\n| -s         | script file (with comments in markdown style) |\r\n| -o         |              output format (html)             |\r\n| -c         |                    css file                   |\r\n\r\n# Usage example\r\n\r\n```shell\r\npython SrctoMarkdown.py -s functions.js -o html -c kult.css \r\n```\r\n\r\n# Define functions\r\n## format_single_comment\r\n\r\n### Description\r\n\r\nThis function takes a list where each item corresponds to one single line of \r\nthe script file. All items are order according to original script.\r\n\r\n### Parameters\r\n\r\n| Parameters |                  Description                              |\r\n|:----------:|:---------------------------------------------------------:|\r\n| script     |     list corresponding to script file                     |\r\n| lang       | programming language tag: python, perl, shell, javascript |\r\n\r\n\r\n### Usage example \r\n\r\n```python\r\nformat_single_comment(file, \"python\")\r\n```\r\n\r\n### Output\r\n\r\n- `md`: a list corresponding to script file with formatted single-line comments \r\nand code tags added to code chunks.\r\n\r\n\r\n```python\r\ndef format_single_comment(script, lang):\r\n    md = []\r\n    prev_line_code = False\r\n    \r\n    for l in script:\r\n        l = l.strip('\\n')\r\n        md_comm = re.match(\"#'\", l)\r\n        \r\n        # Currrent line is a comment\r\n        if md_comm != None:\r\n            # Previous line was code\r\n            if prev_line_code:\r\n                md.append(\"```\\n\")\r\n            # Previous line was not code\r\n            if l != '':\r\n                l_format = re.sub(\"#'\\s*\", '', l)\r\n                md.append(l_format)\r\n            \r\n        # Current line is not a comment        \r\n        else:\r\n            # Previous line was not code\r\n            if not prev_line_code and l != '':\r\n                md.append(\"\\n```\" + lang)\r\n                md.append(l)\r\n            # Previous line was code\r\n            elif l != '':\r\n                md.append(l)\r\n                \r\n        if md_comm != None:\r\n            prev_line_code = False\r\n        elif l != '':\r\n            prev_line_code = True\r\n    if prev_line_code:\r\n        md.append(\"```\")\r\n    return(md) \r\n```\r\n\r\n---\r\n## group\r\n\r\n### Description\r\n\r\nSplits a list according to a string pattern.\r\n\r\n\r\n### Parameters\r\n\r\n| Parameters |                  Description                              |\r\n|:----------:|:---------------------------------------------------------:|\r\n| seq        |     list corresponding to script file                     |\r\n| sep        |    pattern used to split the list                         |\r\n\r\n\r\n### Usage example \r\n\r\n```python\r\nscript_split = group(script, \"\\'''#\")\r\n```\r\n\r\n### Output\r\n\r\n- `g`: a list of lists separated by provided string pattern\r\n\r\n\r\n```python\r\ndef group(seq, sep):\r\n    g = []\r\n    for el in seq:\r\n        if re.match(sep, el) != None :\r\n            yield g\r\n            g = []\r\n        g.append(el)\r\n    yield list(g)\r\n```\r\n## format_multiple_line_comment\r\n\r\n### Description\r\n\r\nThis function takes a list where each item corresponds to one single line of \r\nthe script file. All items are ordered according to original script.\r\n\r\n### Parameters\r\n\r\n| Parameters |                  Description                              |\r\n|:----------:|:---------------------------------------------------------:|\r\n| script     |     list corresponding to script file                     |\r\n| lang       | programming language tag: python, perl, shell, javascript |\r\n| comment_tag_start | Tag to indicate markdown multiple-line comment start(\\'\\'\\'# or /*) |\r\n| comment_tag_end | Tag to indicate markdown multiple-line comment end (#\\'\\'\\' or */) |\r\n\r\n### Usage example \r\n\r\n```python\r\nformat_single_comment(file, \"python\")\r\n```\r\n\r\n### Output\r\n\r\n- `markdown`: a list corresponding to script file with formatted single-line \r\ncomments, multiple-line comments and code tags added to code chunks.\r\n\r\n\r\n```python\r\ndef format_multiple_line_comment(script, lang, \r\n                                 comment_tag_start, comment_tag_end):\r\n    markdown = []\r\n    script_split = group(script, comment_tag_start)\r\n    for l in script_split:\r\n        i = list(group(l,comment_tag_end))\r\n        if len(i) > 1:\r\n            res = [re.sub(\"^\\s*\", '', x).rstrip(\"\\n\") for x in i[0] if re.match(comment_tag_start, x) == None ]\r\n            markdown.extend(res)\r\n            \r\n            res_2 = [x for x in i[1] if  re.match(comment_tag_end, x) == None]\r\n            res_2 = format_single_comment(res_2, lang)\r\n            markdown.extend(res_2)\r\n            \r\n        else:\r\n            res_3 = format_single_comment(i[0], lang)\r\n            markdown.extend(res_3)\r\n    \r\n    return(markdown)\r\n    \r\n```\r\n\r\n# Code starts\r\n## Import libraries\r\nImport `re` to use regular expressions\r\n\r\n```python\r\nimport re\r\n```\r\n\r\nImport `argparse` to handle command-line arguments\r\n\r\n```python\r\nimport argparse\r\n```\r\n\r\nImport `io` to deal with text enconding\r\n\r\n```python\r\nimport io\r\n```\r\n\r\nImport pandoc wrapper\r\n\r\n```python\r\nimport pypandoc\r\n```\r\n\r\nSet path to pandoc\r\n\r\n```python\r\nimport os\r\nos.environ.setdefault('PYPANDOC_PANDOC', '/usr/local/bin/pandoc')\r\n```\r\n\r\nGet parameters \r\n\r\n```python\r\nparser = argparse.ArgumentParser(description='Gets parameters.')\r\nparser.add_argument(\"-s\", required=True)\r\nparser.add_argument(\"-o\", required=True)\r\nparser.add_argument(\"-c\", required=False)\r\nargs = parser.parse_args()\r\n```\r\n\r\nOpen output markdown file\r\n\r\n```python\r\nscript_info = args.s.split(\".\")\r\nfilename = script_info[0]\r\nextension = script_info[1]\r\n```\r\n\r\nOpen file\r\n\r\n```python\r\nfile = open(args.s, 'r')\r\nscript = file.readlines()\r\nfile.close()\r\n```\r\n\r\nConvert script to markdown format \r\n\r\n```python\r\nif extension == \"pl\" or extension == \"sh\" or extension == \"R\" :\r\n    md_doc = format_single_comment(script, extension)\r\nelif extension == \"py\":\r\n    md_doc = format_multiple_line_comment(script, \"python\", \"'''#\", \"#'''\")\r\nelif extension == \"js\":\r\n    md_doc = format_multiple_line_comment(script, \"js\", \"/**\", \"**/\")\r\n```\r\n\r\nJoin list of lines\r\n\r\n```python\r\nmd = '\\n'.join(md_doc)\r\n```\r\n\r\nWrite raw markdown file\r\n\r\n```python\r\nmd_file = open(filename + \".md\", \"w\")\r\nmd_file.write(''.join(md))\r\nmd_file.close()\r\n```\r\n\r\n# Convert markdown to output format\r\n\r\n```python\r\nif args.c:\r\n    output_file = pypandoc.convert_text(md, args.o, format = \"md\", extra_args=['-c' + args.c, '--toc', '-N', '--self-contained', '--standalone'])\r\nelse:\r\n    output_file = pypandoc.convert_text(md, args.o, format = \"md\")\r\n```\r\n\r\n# Write html output\r\n\r\n```python\r\noutput = io.open(filename + \".\" + args.o, \"w\", encoding='utf8')\r\noutput.write(output_file)\r\noutput.close()\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}